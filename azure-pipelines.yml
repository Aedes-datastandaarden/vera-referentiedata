# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyMMdd)$(Rev:.r)


pool:
  vmImage: 'windows-latest'

variables:
  ReleaseNo: '4.0.{Date}'

parameters:
  - name: BuildType
    displayName: Type of build
    type: string
    default: Internal
    values:
    - Internal
    - Release

  - name: ReleaseNotes
    displayName: Releasenotes
    type: string
    default: ' '

steps:
- checkout: self
  persistCredentials: true

- task: DownloadPipelineArtifact@2
  displayName: Download CSV RefBuilder
  inputs:
    buildType: 'specific'
    project: '76c69267-2225-485e-81df-1cbc0e68039d'
    definition: '19'
    buildVersionToDownload: 'latest'
    targetPath: '$(Pipeline.Workspace)'

- task: ExtractFiles@1
  displayName: Extract CSV RefBuilder Artifact
  inputs:
    archiveFilePatterns: '$(Pipeline.Workspace)/vera-csvrefbuilder/vera-csvrefbuilder.7z'
    destinationFolder: '$(Pipeline.Workspace)/vera-csvrefbuilder/bin'
    cleanDestinationFolder: true
    overwriteExistingFiles: true

- task: CmdLine@2
  displayName: Run CSV Builder
  inputs:
    script: |
      echo 'Building Wiki CSV import files ...'
      $(Pipeline.Workspace)/vera-csvrefbuilder/bin/net5.0/vera-csvrefbuilder.exe -i $(Build.Repository.LocalPath)\Referentiedata.csv -o $(Build.ArtifactStagingDirectory)\wiki-referentiedata.csv
      IF %errorlevel% NEQ 0 GOTO :error
      GOTO :end
      :error
        echo vera-csvrefbuilder.exe failed with exitcode %errorlevel%
        EXIT 1
      :end
        echo 'Done'

- task: PublishBuildArtifacts@1
  displayName: Publish CSV Builder Artifacts (Wiki XL)
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    FileCopyOptions: '**/*'
    ArtifactName: CSV-Bestanden

- ${{ if eq(parameters.BuildType,'Release') }}:
  - task: PowerShell@2
    displayName: Set release number
    inputs:
      targetType: inline
      script: |
            $ReleaseNo = ($ENV:RELEASENO -replace "{Date}",(get-date -format 'yyMMdd'))
            write-host "##vso[task.setvariable variable=ReleaseNo]$ReleaseNo"
            $ReleaseNo

  - script: |
        echo Change git config
        git config --global user.email "devops@stichting-vera.nl"
        git config --global user.name "devops"

        echo Remove tag from remote
        git push origin :refs/tags/v%RELEASENO%

        echo Create tag v%RELEASENO%
        git tag -f v%RELEASENO%
        IF %errorlevel% NEQ 0 GOTO :error

        echo Push tag v%RELEASENO%
        git push origin --tags
        IF %errorlevel% NEQ 0 GOTO :error
        GOTO :end

        :error
          echo git failed with exitcode %errorlevel%
          EXIT 1
        :end
          echo 'Done'
    displayName: Create and push tag
    workingDirectory: '$(Build.Repository.LocalPath)'

  - task: GitHubRelease@1
    displayName: 'Create GitHub release'
    inputs:
      gitHubConnection: 'github.com_RonKopp'
      repositoryName: 'vereniging-corponet/vera-referentiedata'
      target: '$(Build.SourceVersion)'
      tagSource: userSpecifiedTag
      tag: 'v$(ReleaseNo)'
      title: 'Release $(ReleaseNo)'
      releaseNotesSource: inline
      releaseNotesInline: '$(Releasenotes)'
      addChangeLog: true